// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package app

import (
	"file-service/internal/config"
	"file-service/internal/handler/grpc"
	"file-service/internal/service"
	"file-service/internal/storage"
	"github.com/minio/minio-go/v7"
	"github.com/minio/minio-go/v7/pkg/credentials"
	"log/slog"
	"os"
)

// Injectors from wire.go:

func Init() (*App, func(), error) {
	configConfig := config.New()
	logger := initLogger(configConfig)
	client, err := initMinio(configConfig)
	if err != nil {
		return nil, nil, err
	}
	minioStorage, err := storage.New(client, configConfig)
	if err != nil {
		return nil, nil, err
	}
	serviceService := service.New(minioStorage)
	handler := grpc.New(serviceService)
	app := newApp(configConfig, logger, handler)
	return app, func() {
	}, nil
}

// wire.go:

func initLogger(cfg *config.Config) *slog.Logger {

	var level slog.Level

	switch cfg.Logger.Level {
	case "debug":
		level = slog.LevelDebug
	case "info":
		level = slog.LevelInfo
	}

	l := slog.New(slog.NewJSONHandler(os.Stdout, &slog.HandlerOptions{Level: level}))
	slog.SetDefault(l)

	return l
}

func initMinio(cfg *config.Config) (*minio.Client, error) {
	endpoint := cfg.Minio.Endpoint
	accessKey := cfg.Minio.AccessKey
	secretKey := cfg.Minio.SecretKey

	client, err := minio.New(endpoint, &minio.Options{
		Creds:  credentials.NewStaticV4(accessKey, secretKey, ""),
		Secure: cfg.Minio.Secure,
	})
	if err != nil {
		return nil, err
	}

	return client, err
}
