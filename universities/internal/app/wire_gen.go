// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package app

import (
	"fmt"
	"google.golang.org/grpc"
	"log/slog"
	"universities/internal/app/router"
	"universities/internal/config"
	"universities/internal/infras/pgsql/repo"
	"universities/internal/services"
	"universities/pkg/engine"
)

// Injectors from wire.go:

func InitApp(grpcServer *grpc.Server, log *slog.Logger) (*Application, func(), error) {
	configConfig := config.New()
	dbEngine, cleanup, err := initDB(configConfig)
	if err != nil {
		return nil, nil, err
	}
	universityRepository := repo.NewUniversitiesPgRepo(dbEngine)
	universityService := services.NewUniversityService(universityRepository)
	universitiesServer := router.NewGRPCServer(grpcServer, universityService, log)
	application := NewApplication(configConfig, log, dbEngine, universityService, universitiesServer)
	return application, func() {
		cleanup()
	}, nil
}

// wire.go:

func initDB(cfg *config.Config) (engine.DBEngine, func(), error) {
	connStr := engine.DBConnString(fmt.Sprintf("postgres://%s:%s@%s:%s/%s?sslmode=disable", cfg.Database.User, cfg.Database.Pass, cfg.Database.Host, cfg.Database.Port, cfg.Database.Name))
	fmt.Println(connStr)
	db, err := engine.NewPostgresDB(connStr, 5, 2)
	if err != nil {
		return nil, nil, err
	}

	return db, func() { db.Close() }, nil
}
