// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package postgresql

import (
	"context"
	"time"
)

const getOpenDays = `-- name: GetOpenDays :many

select u.name, od.description, od.address, od.link, od.date
from university_open_days od
         join universities u on u.id = od.university_id
where u.id = $1
`

type GetOpenDaysRow struct {
	Name        string    `json:"name"`
	Description string    `json:"description"`
	Address     string    `json:"address"`
	Link        string    `json:"link"`
	Date        time.Time `json:"date"`
}

func (q *Queries) GetOpenDays(ctx context.Context, id string) ([]GetOpenDaysRow, error) {
	rows, err := q.db.QueryContext(ctx, getOpenDays, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetOpenDaysRow
	for rows.Next() {
		var i GetOpenDaysRow
		if err := rows.Scan(
			&i.Name,
			&i.Description,
			&i.Address,
			&i.Link,
			&i.Date,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
