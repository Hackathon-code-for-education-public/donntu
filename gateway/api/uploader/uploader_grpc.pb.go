// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: uploader.proto

package uploader

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Uploader_Upload_FullMethodName         = "/Uploader/Upload"
	Uploader_UploadPanorama_FullMethodName = "/Uploader/UploadPanorama"
)

// UploaderClient is the client API for Uploader service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UploaderClient interface {
	Upload(ctx context.Context, opts ...grpc.CallOption) (Uploader_UploadClient, error)
	UploadPanorama(ctx context.Context, opts ...grpc.CallOption) (Uploader_UploadPanoramaClient, error)
}

type uploaderClient struct {
	cc grpc.ClientConnInterface
}

func NewUploaderClient(cc grpc.ClientConnInterface) UploaderClient {
	return &uploaderClient{cc}
}

func (c *uploaderClient) Upload(ctx context.Context, opts ...grpc.CallOption) (Uploader_UploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &Uploader_ServiceDesc.Streams[0], Uploader_Upload_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &uploaderUploadClient{stream}
	return x, nil
}

type Uploader_UploadClient interface {
	Send(*Image) error
	CloseAndRecv() (*ImageInfo, error)
	grpc.ClientStream
}

type uploaderUploadClient struct {
	grpc.ClientStream
}

func (x *uploaderUploadClient) Send(m *Image) error {
	return x.ClientStream.SendMsg(m)
}

func (x *uploaderUploadClient) CloseAndRecv() (*ImageInfo, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ImageInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *uploaderClient) UploadPanorama(ctx context.Context, opts ...grpc.CallOption) (Uploader_UploadPanoramaClient, error) {
	stream, err := c.cc.NewStream(ctx, &Uploader_ServiceDesc.Streams[1], Uploader_UploadPanorama_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &uploaderUploadPanoramaClient{stream}
	return x, nil
}

type Uploader_UploadPanoramaClient interface {
	Send(*Image) error
	CloseAndRecv() (*ImageInfo, error)
	grpc.ClientStream
}

type uploaderUploadPanoramaClient struct {
	grpc.ClientStream
}

func (x *uploaderUploadPanoramaClient) Send(m *Image) error {
	return x.ClientStream.SendMsg(m)
}

func (x *uploaderUploadPanoramaClient) CloseAndRecv() (*ImageInfo, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ImageInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UploaderServer is the server API for Uploader service.
// All implementations must embed UnimplementedUploaderServer
// for forward compatibility
type UploaderServer interface {
	Upload(Uploader_UploadServer) error
	UploadPanorama(Uploader_UploadPanoramaServer) error
	mustEmbedUnimplementedUploaderServer()
}

// UnimplementedUploaderServer must be embedded to have forward compatible implementations.
type UnimplementedUploaderServer struct {
}

func (UnimplementedUploaderServer) Upload(Uploader_UploadServer) error {
	return status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (UnimplementedUploaderServer) UploadPanorama(Uploader_UploadPanoramaServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadPanorama not implemented")
}
func (UnimplementedUploaderServer) mustEmbedUnimplementedUploaderServer() {}

// UnsafeUploaderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UploaderServer will
// result in compilation errors.
type UnsafeUploaderServer interface {
	mustEmbedUnimplementedUploaderServer()
}

func RegisterUploaderServer(s grpc.ServiceRegistrar, srv UploaderServer) {
	s.RegisterService(&Uploader_ServiceDesc, srv)
}

func _Uploader_Upload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UploaderServer).Upload(&uploaderUploadServer{stream})
}

type Uploader_UploadServer interface {
	SendAndClose(*ImageInfo) error
	Recv() (*Image, error)
	grpc.ServerStream
}

type uploaderUploadServer struct {
	grpc.ServerStream
}

func (x *uploaderUploadServer) SendAndClose(m *ImageInfo) error {
	return x.ServerStream.SendMsg(m)
}

func (x *uploaderUploadServer) Recv() (*Image, error) {
	m := new(Image)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Uploader_UploadPanorama_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UploaderServer).UploadPanorama(&uploaderUploadPanoramaServer{stream})
}

type Uploader_UploadPanoramaServer interface {
	SendAndClose(*ImageInfo) error
	Recv() (*Image, error)
	grpc.ServerStream
}

type uploaderUploadPanoramaServer struct {
	grpc.ServerStream
}

func (x *uploaderUploadPanoramaServer) SendAndClose(m *ImageInfo) error {
	return x.ServerStream.SendMsg(m)
}

func (x *uploaderUploadPanoramaServer) Recv() (*Image, error) {
	m := new(Image)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Uploader_ServiceDesc is the grpc.ServiceDesc for Uploader service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Uploader_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Uploader",
	HandlerType: (*UploaderServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Upload",
			Handler:       _Uploader_Upload_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "UploadPanorama",
			Handler:       _Uploader_UploadPanorama_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "uploader.proto",
}
