// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: universities.proto

package universities

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Universities_GetOpenDays_FullMethodName          = "/universities.Universities/GetOpenDays"
	Universities_CreateReview_FullMethodName         = "/universities.Universities/CreateReview"
	Universities_GetReviews_FullMethodName           = "/universities.Universities/GetReviews"
	Universities_GetReplies_FullMethodName           = "/universities.Universities/GetReplies"
	Universities_CreatePanorama_FullMethodName       = "/universities.Universities/CreatePanorama"
	Universities_GetPanoramas_FullMethodName         = "/universities.Universities/GetPanoramas"
	Universities_GetUniversity_FullMethodName        = "/universities.Universities/GetUniversity"
	Universities_GetUniversities_FullMethodName      = "/universities.Universities/GetUniversities"
	Universities_SearchUniversities_FullMethodName   = "/universities.Universities/SearchUniversities"
	Universities_GetTopOfUniversities_FullMethodName = "/universities.Universities/GetTopOfUniversities"
)

// UniversitiesClient is the client API for Universities service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UniversitiesClient interface {
	GetOpenDays(ctx context.Context, in *UniversityId, opts ...grpc.CallOption) (*OpenDays, error)
	CreateReview(ctx context.Context, in *CreateReviewRequest, opts ...grpc.CallOption) (*Review, error)
	GetReviews(ctx context.Context, in *GetReviewsRequest, opts ...grpc.CallOption) (*Reviews, error)
	GetReplies(ctx context.Context, in *UniversityId, opts ...grpc.CallOption) (*Reviews, error)
	CreatePanorama(ctx context.Context, in *CreatePanoramaRequest, opts ...grpc.CallOption) (*Panorama, error)
	GetPanoramas(ctx context.Context, in *GetPanoramasRequest, opts ...grpc.CallOption) (*Panoramas, error)
	GetUniversity(ctx context.Context, in *UniversityId, opts ...grpc.CallOption) (*University, error)
	GetUniversities(ctx context.Context, in *PageParams, opts ...grpc.CallOption) (*UniversitiesSchema, error)
	SearchUniversities(ctx context.Context, in *SearchUniversitiesRequest, opts ...grpc.CallOption) (*UniversitiesSchema, error)
	GetTopOfUniversities(ctx context.Context, in *GetTopOfUniversitiesRequest, opts ...grpc.CallOption) (*UniversitiesSchema, error)
}

type universitiesClient struct {
	cc grpc.ClientConnInterface
}

func NewUniversitiesClient(cc grpc.ClientConnInterface) UniversitiesClient {
	return &universitiesClient{cc}
}

func (c *universitiesClient) GetOpenDays(ctx context.Context, in *UniversityId, opts ...grpc.CallOption) (*OpenDays, error) {
	out := new(OpenDays)
	err := c.cc.Invoke(ctx, Universities_GetOpenDays_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *universitiesClient) CreateReview(ctx context.Context, in *CreateReviewRequest, opts ...grpc.CallOption) (*Review, error) {
	out := new(Review)
	err := c.cc.Invoke(ctx, Universities_CreateReview_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *universitiesClient) GetReviews(ctx context.Context, in *GetReviewsRequest, opts ...grpc.CallOption) (*Reviews, error) {
	out := new(Reviews)
	err := c.cc.Invoke(ctx, Universities_GetReviews_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *universitiesClient) GetReplies(ctx context.Context, in *UniversityId, opts ...grpc.CallOption) (*Reviews, error) {
	out := new(Reviews)
	err := c.cc.Invoke(ctx, Universities_GetReplies_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *universitiesClient) CreatePanorama(ctx context.Context, in *CreatePanoramaRequest, opts ...grpc.CallOption) (*Panorama, error) {
	out := new(Panorama)
	err := c.cc.Invoke(ctx, Universities_CreatePanorama_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *universitiesClient) GetPanoramas(ctx context.Context, in *GetPanoramasRequest, opts ...grpc.CallOption) (*Panoramas, error) {
	out := new(Panoramas)
	err := c.cc.Invoke(ctx, Universities_GetPanoramas_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *universitiesClient) GetUniversity(ctx context.Context, in *UniversityId, opts ...grpc.CallOption) (*University, error) {
	out := new(University)
	err := c.cc.Invoke(ctx, Universities_GetUniversity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *universitiesClient) GetUniversities(ctx context.Context, in *PageParams, opts ...grpc.CallOption) (*UniversitiesSchema, error) {
	out := new(UniversitiesSchema)
	err := c.cc.Invoke(ctx, Universities_GetUniversities_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *universitiesClient) SearchUniversities(ctx context.Context, in *SearchUniversitiesRequest, opts ...grpc.CallOption) (*UniversitiesSchema, error) {
	out := new(UniversitiesSchema)
	err := c.cc.Invoke(ctx, Universities_SearchUniversities_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *universitiesClient) GetTopOfUniversities(ctx context.Context, in *GetTopOfUniversitiesRequest, opts ...grpc.CallOption) (*UniversitiesSchema, error) {
	out := new(UniversitiesSchema)
	err := c.cc.Invoke(ctx, Universities_GetTopOfUniversities_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UniversitiesServer is the server API for Universities service.
// All implementations must embed UnimplementedUniversitiesServer
// for forward compatibility
type UniversitiesServer interface {
	GetOpenDays(context.Context, *UniversityId) (*OpenDays, error)
	CreateReview(context.Context, *CreateReviewRequest) (*Review, error)
	GetReviews(context.Context, *GetReviewsRequest) (*Reviews, error)
	GetReplies(context.Context, *UniversityId) (*Reviews, error)
	CreatePanorama(context.Context, *CreatePanoramaRequest) (*Panorama, error)
	GetPanoramas(context.Context, *GetPanoramasRequest) (*Panoramas, error)
	GetUniversity(context.Context, *UniversityId) (*University, error)
	GetUniversities(context.Context, *PageParams) (*UniversitiesSchema, error)
	SearchUniversities(context.Context, *SearchUniversitiesRequest) (*UniversitiesSchema, error)
	GetTopOfUniversities(context.Context, *GetTopOfUniversitiesRequest) (*UniversitiesSchema, error)
	mustEmbedUnimplementedUniversitiesServer()
}

// UnimplementedUniversitiesServer must be embedded to have forward compatible implementations.
type UnimplementedUniversitiesServer struct {
}

func (UnimplementedUniversitiesServer) GetOpenDays(context.Context, *UniversityId) (*OpenDays, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOpenDays not implemented")
}
func (UnimplementedUniversitiesServer) CreateReview(context.Context, *CreateReviewRequest) (*Review, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReview not implemented")
}
func (UnimplementedUniversitiesServer) GetReviews(context.Context, *GetReviewsRequest) (*Reviews, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReviews not implemented")
}
func (UnimplementedUniversitiesServer) GetReplies(context.Context, *UniversityId) (*Reviews, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReplies not implemented")
}
func (UnimplementedUniversitiesServer) CreatePanorama(context.Context, *CreatePanoramaRequest) (*Panorama, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePanorama not implemented")
}
func (UnimplementedUniversitiesServer) GetPanoramas(context.Context, *GetPanoramasRequest) (*Panoramas, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPanoramas not implemented")
}
func (UnimplementedUniversitiesServer) GetUniversity(context.Context, *UniversityId) (*University, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUniversity not implemented")
}
func (UnimplementedUniversitiesServer) GetUniversities(context.Context, *PageParams) (*UniversitiesSchema, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUniversities not implemented")
}
func (UnimplementedUniversitiesServer) SearchUniversities(context.Context, *SearchUniversitiesRequest) (*UniversitiesSchema, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchUniversities not implemented")
}
func (UnimplementedUniversitiesServer) GetTopOfUniversities(context.Context, *GetTopOfUniversitiesRequest) (*UniversitiesSchema, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopOfUniversities not implemented")
}
func (UnimplementedUniversitiesServer) mustEmbedUnimplementedUniversitiesServer() {}

// UnsafeUniversitiesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UniversitiesServer will
// result in compilation errors.
type UnsafeUniversitiesServer interface {
	mustEmbedUnimplementedUniversitiesServer()
}

func RegisterUniversitiesServer(s grpc.ServiceRegistrar, srv UniversitiesServer) {
	s.RegisterService(&Universities_ServiceDesc, srv)
}

func _Universities_GetOpenDays_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UniversityId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UniversitiesServer).GetOpenDays(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Universities_GetOpenDays_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UniversitiesServer).GetOpenDays(ctx, req.(*UniversityId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Universities_CreateReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UniversitiesServer).CreateReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Universities_CreateReview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UniversitiesServer).CreateReview(ctx, req.(*CreateReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Universities_GetReviews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReviewsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UniversitiesServer).GetReviews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Universities_GetReviews_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UniversitiesServer).GetReviews(ctx, req.(*GetReviewsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Universities_GetReplies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UniversityId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UniversitiesServer).GetReplies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Universities_GetReplies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UniversitiesServer).GetReplies(ctx, req.(*UniversityId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Universities_CreatePanorama_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePanoramaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UniversitiesServer).CreatePanorama(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Universities_CreatePanorama_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UniversitiesServer).CreatePanorama(ctx, req.(*CreatePanoramaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Universities_GetPanoramas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPanoramasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UniversitiesServer).GetPanoramas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Universities_GetPanoramas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UniversitiesServer).GetPanoramas(ctx, req.(*GetPanoramasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Universities_GetUniversity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UniversityId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UniversitiesServer).GetUniversity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Universities_GetUniversity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UniversitiesServer).GetUniversity(ctx, req.(*UniversityId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Universities_GetUniversities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UniversitiesServer).GetUniversities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Universities_GetUniversities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UniversitiesServer).GetUniversities(ctx, req.(*PageParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Universities_SearchUniversities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchUniversitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UniversitiesServer).SearchUniversities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Universities_SearchUniversities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UniversitiesServer).SearchUniversities(ctx, req.(*SearchUniversitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Universities_GetTopOfUniversities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTopOfUniversitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UniversitiesServer).GetTopOfUniversities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Universities_GetTopOfUniversities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UniversitiesServer).GetTopOfUniversities(ctx, req.(*GetTopOfUniversitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Universities_ServiceDesc is the grpc.ServiceDesc for Universities service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Universities_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "universities.Universities",
	HandlerType: (*UniversitiesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOpenDays",
			Handler:    _Universities_GetOpenDays_Handler,
		},
		{
			MethodName: "CreateReview",
			Handler:    _Universities_CreateReview_Handler,
		},
		{
			MethodName: "GetReviews",
			Handler:    _Universities_GetReviews_Handler,
		},
		{
			MethodName: "GetReplies",
			Handler:    _Universities_GetReplies_Handler,
		},
		{
			MethodName: "CreatePanorama",
			Handler:    _Universities_CreatePanorama_Handler,
		},
		{
			MethodName: "GetPanoramas",
			Handler:    _Universities_GetPanoramas_Handler,
		},
		{
			MethodName: "GetUniversity",
			Handler:    _Universities_GetUniversity_Handler,
		},
		{
			MethodName: "GetUniversities",
			Handler:    _Universities_GetUniversities_Handler,
		},
		{
			MethodName: "SearchUniversities",
			Handler:    _Universities_SearchUniversities_Handler,
		},
		{
			MethodName: "GetTopOfUniversities",
			Handler:    _Universities_GetTopOfUniversities_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "universities.proto",
}
