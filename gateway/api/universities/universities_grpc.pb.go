// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: universities.proto

package universities

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UniversitiesClient is the client API for Universities service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UniversitiesClient interface {
	GetOpenDays(ctx context.Context, in *UniversityId, opts ...grpc.CallOption) (*OpenDays, error)
	GetReviews(ctx context.Context, in *GetReviewsRequest, opts ...grpc.CallOption) (*Reviews, error)
}

type universitiesClient struct {
	cc grpc.ClientConnInterface
}

func NewUniversitiesClient(cc grpc.ClientConnInterface) UniversitiesClient {
	return &universitiesClient{cc}
}

func (c *universitiesClient) GetOpenDays(ctx context.Context, in *UniversityId, opts ...grpc.CallOption) (*OpenDays, error) {
	out := new(OpenDays)
	err := c.cc.Invoke(ctx, "/universities.Universities/GetOpenDays", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *universitiesClient) GetReviews(ctx context.Context, in *GetReviewsRequest, opts ...grpc.CallOption) (*Reviews, error) {
	out := new(Reviews)
	err := c.cc.Invoke(ctx, "/universities.Universities/GetReviews", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UniversitiesServer is the server API for Universities service.
// All implementations must embed UnimplementedUniversitiesServer
// for forward compatibility
type UniversitiesServer interface {
	GetOpenDays(context.Context, *UniversityId) (*OpenDays, error)
	GetReviews(context.Context, *GetReviewsRequest) (*Reviews, error)
	mustEmbedUnimplementedUniversitiesServer()
}

// UnimplementedUniversitiesServer must be embedded to have forward compatible implementations.
type UnimplementedUniversitiesServer struct {
}

func (UnimplementedUniversitiesServer) GetOpenDays(context.Context, *UniversityId) (*OpenDays, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOpenDays not implemented")
}
func (UnimplementedUniversitiesServer) GetReviews(context.Context, *GetReviewsRequest) (*Reviews, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReviews not implemented")
}
func (UnimplementedUniversitiesServer) mustEmbedUnimplementedUniversitiesServer() {}

// UnsafeUniversitiesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UniversitiesServer will
// result in compilation errors.
type UnsafeUniversitiesServer interface {
	mustEmbedUnimplementedUniversitiesServer()
}

func RegisterUniversitiesServer(s grpc.ServiceRegistrar, srv UniversitiesServer) {
	s.RegisterService(&Universities_ServiceDesc, srv)
}

func _Universities_GetOpenDays_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UniversityId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UniversitiesServer).GetOpenDays(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/universities.Universities/GetOpenDays",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UniversitiesServer).GetOpenDays(ctx, req.(*UniversityId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Universities_GetReviews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReviewsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UniversitiesServer).GetReviews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/universities.Universities/GetReviews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UniversitiesServer).GetReviews(ctx, req.(*GetReviewsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Universities_ServiceDesc is the grpc.ServiceDesc for Universities service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Universities_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "universities.Universities",
	HandlerType: (*UniversitiesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOpenDays",
			Handler:    _Universities_GetOpenDays_Handler,
		},
		{
			MethodName: "GetReviews",
			Handler:    _Universities_GetReviews_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "universities.proto",
}
