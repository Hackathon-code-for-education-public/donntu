syntax = "proto3";

package universities;

option go_package = "api/universities";

message UniversityId {
  string id = 1;
}

message OpenDay {
  string universityName = 1;
  string description = 2;
  string address = 3;
  string link = 4;
  int64 time = 5;
}

message OpenDays {
  repeated OpenDay days = 1;
}

message Params {
  int32 offset = 1;
  int32 limit = 2;
}

message GetReviewsRequest {
  string universityId = 1;
  Params params = 2;
}

message Review {
  string universityId = 1;
  string authorStatus = 2;
  string sentiment = 3;
  int64 date = 4;
  string text = 5;
  int32 repliesCount = 6;
}

message Reviews {
  repeated Review reviews = 1;
}

enum PanoramaTypes {
  Buildings = 0;
  Dormitories = 1;
  Canteens = 2;
  Other = 3;
}

message Panorama {
  string universityId = 1;
  string address = 2;
  string name = 3;
  string firstLocation = 4;
  string secondLocation = 5;
  PanoramaTypes type = 6;
}

message Panoramas {
  repeated Panorama panoramas = 1;
}

message CreatePanoramaRequest {
  Panorama panorama = 1;
}

message GetPanoramasRequest {
  string universityId = 1;
  string category = 2;
}

message University {
  string id = 1;
  string name = 2;
  string longName = 3;
  string logo = 4;
  float rating = 5;
  string region = 6;
  string type = 7;
  int32 studyFields = 8;
  int32 budgetPlaces = 9;
}

message UniversitiesSchema {
  repeated University universities = 1;
}

message PageParams {
  int32 offset = 1;
  int32 limit = 2;
}

message SearchUniversitiesRequest {
  string name = 1;
}
message GetTopOfUniversitiesRequest {
  int32 count = 1;
}
service Universities {
  rpc GetOpenDays(UniversityId) returns (OpenDays);
  rpc GetReviews(GetReviewsRequest) returns (Reviews);
  rpc CreatePanorama(CreatePanoramaRequest) returns (Panorama);
  rpc GetPanoramas(GetPanoramasRequest) returns (Panoramas);

  rpc GetUniversity(UniversityId) returns (University);
  rpc GetUniversities(PageParams) returns (UniversitiesSchema);
  rpc SearchUniversities(SearchUniversitiesRequest) returns (UniversitiesSchema);
  rpc GetTopOfUniversities(GetTopOfUniversitiesRequest) returns (UniversitiesSchema);
}